#!/bin/bash

set -euo pipefail

[ -v SOLR_DEFAULT_CONFIG ] || SOLR_DEFAULT_CONFIG="_default"

timestamp() {
	date -Ins -u
}

say() {
	echo -e "$(timestamp): ${@}"
}

err() {
	say "ERROR: ${@}" 1>&2
}

fail() {
	say "${@}"
	exit ${EXIT_CODE:-1}
}

usage() {
	echo -e "usage: ${BASH_SOURCE:-${0}} configuration.zip [base-configuration-name]" 1>&2
	exit 1
}

is_valid_conf_name() {
	local N="${1}"
	[ -n "${N}" ] || return 1
	case "${N}" in
		. | .. ) return 1 ;;
		*/* ) return 1 ;;
	esac
	return 0
}

[ -v BASE_DIR ] || BASE_DIR="/app"
[ -v DEPL_DIR ] || DEPL_DIR="${BASE_DIR}/depl"

[ ${#} -ge 1 ] || usage
[ ${#} -le 2 ] || usage

CONF="${1}"
[ -n "${CONF}" ] || fail "The configuration filename may not be empty"
[ -e "${CONF}" ] || fail "The configuration file [${CONF}] does not exist"
[ -f "${CONF}" ] || fail "The configuration path [${CONF}] is not a regular file"
[ -s "${CONF}" ] || fail "The configuration file [${CONF}] is empty"

CONF_NAME="$(basename "${CONF}")"

# Remove the last extension's last dot
CONF_NAME="${CONF_NAME%.*}"
is_valid_conf_name "${CONF_NAME}" || fail "The configuration name [${CONF_NAME}] is not valid"

SOURCE="${SOLR_DEFAULT_CONFIG}"
[ ${#} -lt 2 ] || SOURCE="${2}"
is_valid_conf_name "${SOURCE}" || fail "The configuration name [${CONF_NAME}] is not valid"

[ -v SOLR_HOME ] || fail "Can't find the SOLR_HOME variable - can't continue"

CONF_HOME="${SOLR_HOME}/configsets"
[ -d "${CONF_HOME}" ] || fail "Can't find the configsets directory at [${CONF_HOME}]"

TARGET_DIR="${CONF_HOME}/${CONF_NAME}"
if [ -d "${TARGET_DIR}" ] ; then
	say "The configuration [${CONF_NAME}] seems to already be deployed, skipping initialization"
	exit 0
fi

SOURCE_DIR="${CONF_HOME}/${SOURCE}"
[ -d "${SOURCE_DIR}" ] || fail "The configuration [${SOURCE}] hasn't been deployed yet"

# Ok ... all is well ... do the work!
say "Copying the source configuration [${SOURCE}] to create [${CONF_NAME}]..."
OUT="$(cp -Rprfv "${SOURCE_DIR}" "${TARGET_DIR}" 2>&1)" || fail "Failed to copy the source configuration from [${SOURCE_DIR}] into [${TARGET_DIR}]:\n${OUT}"
say "Extracting the bundled configuration"
OUT="$(unzip -d "${TARGET_DIR}" "${CONF}" 2>&1)" || fail "Failed to extract the bundled configuration from [${CONF}] into [${TARGET_DIR}]:\n${OUT}"
say "Removing extraneous files"
OUT="$(rm -f "${TARGET_DIR}/conf/managed-schema")" || fail "Failed to remove the managed schema in [${TARGET_DIR}]:\n${OUT}"
say "Deployment complete"
exit 0
